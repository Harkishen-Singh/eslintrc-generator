var rules = [

  // Possible Errors
  // The following rules point out areas where you might have made mistakes.
  ['Possible Errors', 'comma-dangle', 'disallow or enforce trailing commas', 'yes'],
  ['Possible Errors', 'no-cond-assign', 'disallow assignment in conditional expressions', 'yes'],
  ['Possible Errors', 'no-console', 'disallow use of console in the node environment', 'yes'],
  ['Possible Errors', 'no-constant-condition', 'disallow use of constant expressions in conditions', 'yes'],
  ['Possible Errors', 'no-control-regex', 'disallow control characters in regular expressions', 'yes'],
  ['Possible Errors', 'no-debugger', 'disallow use of debugger', 'yes'],
  ['Possible Errors', 'no-dupe-args', 'disallow duplicate arguments in functions', 'yes'],
  ['Possible Errors', 'no-dupe-keys', 'disallow duplicate keys when creating object literals', 'yes'],
  ['Possible Errors', 'no-duplicate-case', 'disallow a duplicate case label.', 'yes'],
  ['Possible Errors', 'no-empty-character-class', 'disallow the use of empty character classes in regular expressions', 'yes'],
  ['Possible Errors', 'no-empty', 'disallow empty statements', 'yes'],
  ['Possible Errors', 'no-ex-assign', 'disallow assigning to the exception in a catch block', 'yes'],
  ['Possible Errors', 'no-extra-boolean-cast', 'disallow double-negation boolean casts in a boolean context', 'yes'],
  ['Possible Errors', 'no-extra-parens', 'disallow unnecessary parentheses', 'no'],
  ['Possible Errors', 'no-extra-semi', 'disallow unnecessary semicolons', 'yes'],
  ['Possible Errors', 'no-func-assign', 'disallow overwriting functions written as function declarations', 'yes'],
  ['Possible Errors', 'no-inner-declarations', 'disallow function or variable declarations in nested blocks', 'yes'],
  ['Possible Errors', 'no-invalid-regexp', 'disallow invalid regular expression strings in the RegExp constructor', 'yes'],
  ['Possible Errors', 'no-irregular-whitespace', 'disallow irregular whitespace outside of strings and comments', 'yes'],
  ['Possible Errors', 'no-negated-in-lhs', 'disallow negation of the left operand of an in expression', 'yes'],
  ['Possible Errors', 'no-obj-calls', 'disallow the use of object properties of the global object (Math and JSON) as functions', 'yes'],
  ['Possible Errors', 'no-regex-spaces', 'disallow multiple spaces in a regular expression literal', 'yes'],
  ['Possible Errors', 'no-sparse-arrays', 'disallow sparse arrays', 'yes'],
  ['Possible Errors', 'no-unreachable', 'disallow unreachable statements after a return, throw, continue, or break statement', 'yes'],
  ['Possible Errors', 'use-isnan', 'disallow comparisons with the value NaN', 'yes'],
  ['Possible Errors', 'valid-jsdoc', 'Ensure JSDoc comments are valid', 'no'],
  ['Possible Errors', 'valid-typeof', 'Ensure that the results of typeof are compared against a valid string', 'yes'],
  ['Possible Errors', 'no-unexpected-multiline', 'Avoid code that looks like two expressions but is actually one', 'no'],

  // Best Practices
  // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.
  ['Best Practices', 'accessor-pairs', 'Enforces getter/setter pairs in objects', 'no'],
  ['Best Practices', 'block-scoped-var', 'treat var statements as if they were block scoped', 'no'],
  ['Best Practices', 'complexity', 'specify the maximum cyclomatic complexity allowed in a program', 'no'],
  ['Best Practices', 'consistent-return', 'require return statements to either always or never specify values', 'no'],
  ['Best Practices', 'curly', 'specify curly brace conventions for all control statements', 'no'],
  ['Best Practices', 'default-case', 'require default case in switch statements', 'no'],
  ['Best Practices', 'dot-notation', 'encourages use of dot notation whenever possible', 'no'],
  ['Best Practices', 'dot-location', 'enforces consistent newlines before or after dots', 'no'],
  ['Best Practices', 'eqeqeq', 'require the use of === and !==', 'no'],
  ['Best Practices', 'guard-for-in', 'make sure for-in loops have an if statement', 'no'],
  ['Best Practices', 'no-alert', 'disallow the use of alert, confirm, and prompt', 'no'],
  ['Best Practices', 'no-caller', 'disallow use of arguments.caller or arguments.callee', 'no'],
  ['Best Practices', 'no-div-regex', 'disallow division operators explicitly at beginning of regular expression', 'no'],
  ['Best Practices', 'no-else-return', 'disallow else after a return in an if', 'no'],
  ['Best Practices', 'no-empty-label', 'disallow use of labels for anything other than loops and switches', 'no'],
  ['Best Practices', 'no-eq-null', 'disallow comparisons to null without a type-checking operator', 'no'],
  ['Best Practices', 'no-eval', 'disallow use of eval()', 'no'],
  ['Best Practices', 'no-extend-native', 'disallow adding to native types', 'no'],
  ['Best Practices', 'no-extra-bind', 'disallow unnecessary function binding', 'no'],
  ['Best Practices', 'no-fallthrough', 'disallow fallthrough of case statements', 'yes'],
  ['Best Practices', 'no-floating-decimal', 'disallow the use of leading or trailing decimal points in numeric literals', 'no'],
  ['Best Practices', 'no-implicit-coercion', 'disallow the type conversions with shorter notations', 'no'],
  ['Best Practices', 'no-implied-eval', 'disallow use of eval()-like methods', 'no'],
  ['Best Practices', 'no-invalid-this', 'disallow this keywords outside of classes or class-like objects', 'no'],
  ['Best Practices', 'no-iterator', 'disallow usage of __iterator__ property', 'no'],
  ['Best Practices', 'no-labels', 'disallow use of labeled statements', 'no'],
  ['Best Practices', 'no-lone-blocks', 'disallow unnecessary nested blocks', 'no'],
  ['Best Practices', 'no-loop-func', 'disallow creation of functions within loops', 'no'],
  ['Best Practices', 'no-multi-spaces', 'disallow use of multiple spaces', 'no'],
  ['Best Practices', 'no-multi-str', 'disallow use of multiline strings', 'no'],
  ['Best Practices', 'no-native-reassign', 'disallow reassignments of native objects', 'no'],
  ['Best Practices', 'no-new-func', 'disallow use of new operator for Function object', 'no'],
  ['Best Practices', 'no-new-wrappers', 'disallows creating new instances of String,Number, and Boolean', 'no'],
  ['Best Practices', 'no-new', 'disallow use of the new operator when not part of an assignment or comparison', 'no'],
  ['Best Practices', 'no-octal-escape', 'disallow use of octal escape sequences in string literals, such as var foo = "Copyright \\251";', 'no'],
  ['Best Practices', 'no-octal', 'disallow use of octal literals', 'yes'],
  ['Best Practices', 'no-param-reassign', 'disallow reassignment of function parameters', 'no'],
  ['Best Practices', 'no-process-env', 'disallow use of process.env', 'no'],
  ['Best Practices', 'no-proto', 'disallow usage of __proto__ property', 'no'],
  ['Best Practices', 'no-redeclare', 'disallow declaring the same variable more than once', 'yes'],
  ['Best Practices', 'no-return-assign', 'disallow use of assignment in return statement', 'no'],
  ['Best Practices', 'no-script-url', 'disallow use of javascript: urls.', 'no'],
  ['Best Practices', 'no-self-compare', 'disallow comparisons where both sides are exactly the same', 'no'],
  ['Best Practices', 'no-sequences', 'disallow use of the comma operator', 'no'],
  ['Best Practices', 'no-throw-literal', 'restrict what can be thrown as an exception', 'no'],
  ['Best Practices', 'no-unused-expressions', 'disallow usage of expressions in statement position', 'no'],
  ['Best Practices', 'no-useless-call', 'disallow unnecessary .call() and .apply()', 'no'],
  ['Best Practices', 'no-void', 'disallow use of the void operator', 'no'],
  ['Best Practices', 'no-warning-comments', 'disallow usage of configurable warning terms in comments', 'e.g. TODO or FIXME', 'no'],
  ['Best Practices', 'no-with', 'disallow use of the with statement', 'no'],
  ['Best Practices', 'radix', 'require use of the second argument for parseInt()', 'no'],
  ['Best Practices', 'vars-on-top', 'require declaration of all vars at the top of their containing scope', 'no'],
  ['Best Practices', 'wrap-iife', 'require immediate function invocation to be wrapped in parentheses', 'no'],
  ['Best Practices', 'yoda', 'require or disallow Yoda conditions', 'no'],

  // Strict Mode
  // These rules relate to using strict mode.
  ['Strict Mode', 'strict', 'controls location of Use Strict Directives', 'no'],

  // Variables
  // These rules have to do with variable declarations.
  ['Variables', 'init-declarations', 'enforce or disallow variable initializations at definition', 'no'],
  ['Variables', 'no-catch-shadow', 'disallow the catch clause parameter name being the same as a variable in the outer scope', 'no'],
  ['Variables', 'no-delete-var', 'disallow deletion of variables', 'yes'],
  ['Variables', 'no-label-var', 'disallow labels that share a name with a variable', 'no'],
  ['Variables', 'no-shadow-restricted-names', 'disallow shadowing of names such as arguments', 'no'],
  ['Variables', 'no-shadow', 'disallow declaration of variables already declared in the outer scope', 'no'],
  ['Variables', 'no-undef-init', 'disallow use of undefined when initializing variables', 'no'],
  ['Variables', 'no-undef', 'disallow use of undeclared variables unless mentioned in a /*global */ block', 'yes'],
  ['Variables', 'no-undefined', 'disallow use of undefined variable', 'no'],
  ['Variables', 'no-unused-vars', 'disallow declaration of variables that are not used in the code', 'yes'],
  ['Variables', 'no-use-before-define', 'disallow use of variables before they are defined', 'no'],

  // Node.js
  // These rules are specific to JavaScript running on Node.js.
  ['Node.js', 'callback-return', 'enforce return after a callback', 'no'],
  ['Node.js', 'handle-callback-err', 'enforce error handling in callbacks', 'no'],
  ['Node.js', 'no-mixed-requires', 'disallow mixing regular variable and require declarations', 'no'],
  ['Node.js', 'no-new-require', 'disallow use of new operator with the require function', 'no'],
  ['Node.js', 'no-path-concat', 'disallow string concatenation with __dirname and __filename', 'no'],
  ['Node.js', 'no-process-exit', 'disallow process.exit()', 'no'],
  ['Node.js', 'no-restricted-modules', 'restrict usage of specified node modules', 'no'],
  ['Node.js', 'no-sync', 'disallow use of synchronous methods', 'no'],

  // Stylistic Issues
  // These rules are purely matters of style and are quite subjective.
  ['Stylistic Issues', 'array-bracket-spacing', 'enforce spacing inside array brackets', 'no'],
  ['Stylistic Issues', 'brace-style', 'enforce one true brace style', 'no'],
  ['Stylistic Issues', 'camelcase', 'require camel case names', 'no'],
  ['Stylistic Issues', 'comma-spacing', 'enforce spacing before and after comma', 'no'],
  ['Stylistic Issues', 'comma-style', 'enforce one true comma style', 'no'],
  ['Stylistic Issues', 'computed-property-spacing', 'require or disallow padding inside computed properties', 'no'],
  ['Stylistic Issues', 'consistent-this', 'enforce consistent naming when capturing the current execution context', 'no'],
  ['Stylistic Issues', 'eol-last', 'enforce newline at the end of file, with no multiple empty lines', 'no'],
  ['Stylistic Issues', 'func-names', 'require function expressions to have a name', 'no'],
  ['Stylistic Issues', 'func-style', 'enforce use of function declarations or expressions', 'no'],
  ['Stylistic Issues', 'id-length', 'this option enforces minimum and maximum identifier lengths (variable names, property names etc.) (off by default)', 'no'],
  ['Stylistic Issues', 'indent', 'specify tab or space width for your code', 'no'],
  ['Stylistic Issues', 'key-spacing', 'enforce spacing between keys and values in object literal properties', 'no'],
  ['Stylistic Issues', 'lines-around-comment', 'enforce empty lines around comments', 'no'],
  ['Stylistic Issues', 'linebreak-style', 'disallow mixed \'LF\' and \'CRLF\' as linebreaks', 'no'],
  ['Stylistic Issues', 'max-nested-callbacks', 'specify the maximum depth callbacks can be nested', 'no'],
  ['Stylistic Issues', 'new-cap', 'require a capital letter for constructors', 'no'],
  ['Stylistic Issues', 'new-parens', 'disallow the omission of parentheses when invoking a constructor with no arguments', 'no'],
  ['Stylistic Issues', 'newline-after-var', 'require or disallow an empty newline after variable declarations', 'no'],
  ['Stylistic Issues', 'no-array-constructor', 'disallow use of the Array constructor', 'no'],
  ['Stylistic Issues', 'no-continue', 'disallow use of the continue statement', 'no'],
  ['Stylistic Issues', 'no-inline-comments', 'disallow comments inline after code', 'no'],
  ['Stylistic Issues', 'no-lonely-if', 'disallow if as the only statement in an else block', 'no'],
  ['Stylistic Issues', 'no-mixed-spaces-and-tabs', 'disallow mixed spaces and tabs for indentation', 'yes'],
  ['Stylistic Issues', 'no-multiple-empty-lines', 'disallow multiple empty lines', 'no'],
  ['Stylistic Issues', 'no-nested-ternary', 'disallow nested ternary expressions', 'no'],
  ['Stylistic Issues', 'no-new-object', 'disallow the use of the Object constructor', 'no'],
  ['Stylistic Issues', 'no-spaced-func', 'disallow space between function identifier and application', 'no'],
  ['Stylistic Issues', 'no-ternary', 'disallow the use of ternary operators', 'no'],
  ['Stylistic Issues', 'no-trailing-spaces', 'disallow trailing whitespace at the end of lines', 'no'],
  ['Stylistic Issues', 'no-underscore-dangle', 'disallow dangling underscores in identifiers', 'no'],
  ['Stylistic Issues', 'no-unneeded-ternary', 'disallow the use of Boolean literals in conditional expressions', 'no'],
  ['Stylistic Issues', 'object-curly-spacing', 'require or disallow padding inside curly braces', 'no'],
  ['Stylistic Issues', 'one-var', 'require or disallow one variable declaration per function', 'no'],
  ['Stylistic Issues', 'operator-assignment', 'require assignment operator shorthand where possible or prohibit it entirely', 'no'],
  ['Stylistic Issues', 'operator-linebreak', 'enforce operators to be placed before or after line breaks', 'no'],
  ['Stylistic Issues', 'padded-blocks', 'enforce padding within blocks', 'no'],
  ['Stylistic Issues', 'quote-props', 'require quotes around object literal property names', 'no'],
  ['Stylistic Issues', 'quotes', 'specify whether backticks, double or single quotes should be used', 'no'],
  ['Stylistic Issues', 'id-match', 'require identifiers to match the provided regular expression', 'no'],
  ['Stylistic Issues', 'semi-spacing', 'enforce spacing before and after semicolons', 'no'],
  ['Stylistic Issues', 'semi', 'require or disallow use of semicolons instead of ASI', 'no'],
  ['Stylistic Issues', 'sort-vars', 'sort variables within the same declaration block', 'no'],
  ['Stylistic Issues', 'space-after-keywords', 'require a space after certain keywords', 'no'],
  ['Stylistic Issues', 'space-before-blocks', 'require or disallow a space before blocks', 'no'],
  ['Stylistic Issues', 'space-before-function-paren', 'require or disallow a space before function opening parenthesis', 'no'],
  ['Stylistic Issues', 'space-in-parens', 'require or disallow spaces inside parentheses', 'no'],
  ['Stylistic Issues', 'space-infix-ops', 'require spaces around operators', 'no'],
  ['Stylistic Issues', 'space-return-throw-case', 'require a space after return, throw, and case', 'no'],
  ['Stylistic Issues', 'space-unary-ops', 'require or disallow spaces before/after unary operators', 'no'],
  ['Stylistic Issues', 'spaced-comment', 'require or disallow a space immediately following the // or /* in a comment', 'no'],
  ['Stylistic Issues', 'wrap-regex', 'require regex literals to be wrapped in parentheses', 'no'],

  // ECMAScript 6
  // These rules are only relevant to ES6 environments.
  ['ECMAScript 6', 'arrow-parens', 'require parens in arrow function arguments', 'no'],
  ['ECMAScript 6', 'arrow-spacing', 'require space before/after arrow function\'s arrow', 'no'],
  ['ECMAScript 6', 'constructor-super', 'verify calls of super() in constructors', 'no'],
  ['ECMAScript 6', 'generator-star-spacing', 'enforce spacing around the * in generator functions', 'no'],
  ['ECMAScript 6', 'no-class-assign', 'disallow modifying variables of class declarations', 'no'],
  ['ECMAScript 6', 'no-const-assign', 'disallow modifying variables that are declared using const', 'no'],
  ['ECMAScript 6', 'no-this-before-super', 'disallow use of this/super before calling super() in constructors.', 'no'],
  ['ECMAScript 6', 'no-var', 'require let or const instead of var', 'no'],
  ['ECMAScript 6', 'object-shorthand', 'require method and property shorthand syntax for object literals', 'no'],
  ['ECMAScript 6', 'prefer-const', 'suggest using const declaration for variables that are never modified after declared', 'no'],
  ['ECMAScript 6', 'prefer-spread', 'suggest using the spread operator instead of .apply().', 'no'],
  ['ECMAScript 6', 'prefer-reflect', 'suggest using Reflect methods where applicable', 'no'],
  ['ECMAScript 6', 'require-yield', 'disallow generator functions that do not have yield', 'no'],

  // Legacy
  // The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.
  ['Legacy', 'max-depth', 'specify the maximum depth that blocks can be nested', 'no'],
  ['Legacy', 'max-len', 'specify the maximum length of a line in your program', 'no'],
  ['Legacy', 'max-params', 'limits the number of parameters that can be used in the function declaration.', 'no'],
  ['Legacy', 'max-statements', 'specify the maximum number of statement allowed in a function', 'no'],
  ['Legacy', 'no-bitwise', 'disallow use of bitwise operators', 'no'],
  ['Legacy', 'no-plusplus', 'disallow use of unary operators, ++ and --', 'no'],
];

export default rules;
